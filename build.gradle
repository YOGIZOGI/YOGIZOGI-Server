plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.1'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco'
}

group = 'dev'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

jacoco {
	toolVersion = '0.8.8'
}

repositories {
	mavenCentral()
}

dependencies {

    // Web
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// Security
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// Jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Database
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'com.h2database:h2'

	// UUID
	implementation "com.fasterxml.uuid:java-uuid-generator:4.0.1"

	// SMS
	implementation 'net.nurigo:sdk:4.3.0'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

	// S3
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	// p6spy
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.1'
}

test {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

jacocoTestReport {

	reports {
		html.required = true
		xml.required = false
		csv.required = false

		html.destination file("jacoco/jacocoHtml")
	}

	def Qdomains = []

	for (qPattern in '**/QA'..'**/QZ') {
		Qdomains.add(qPattern + '*')
	}

	afterEvaluate {

		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, exclude: [
							"**/*Application*",
							"**/model/*",
							"**/exception/*",
							"**/global",
							"**/infra"
					] + Qdomains)
		}))
	}

	finalizedBy 'jacocoTestCoverageVerification'

}

jacocoTestCoverageVerification {

	violationRules {

		rule {

			enabled = true
			element = 'CLASS'

			limit {

				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.6

			}

			def Qdomains = []

			for (qPattern in '**/QA'..'**/QZ') {
				Qdomains.add(qPattern + '*')
			}

			excludes = [
					"**/*Application*",
					"**/model/*",
					"**/exception/*",
					"**/global",
					"**/infra"
			] + Qdomains;

		}

	}

}
